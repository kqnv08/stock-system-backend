# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Brand {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  enabled: Boolean
  id: ID
  name: String!
  updatedAt: DateTime
}

input BrandInputDto {
  enabled: Boolean
  key: String!
  value: String
}

type BrandListPageInfoResponse {
  data: [Brand!]
  limit: Int
  page: Int
  totalPages: Int
  totalRecords: Int
}

type Category {
  createdAt: DateTime
  deletedAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

input CategoryInputDto {
  name: String!
}

type CategoryListPageInfoResponse {
  data: [Category!]
  limit: Int
  page: Int
  totalPages: Int
  totalRecords: Int
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input FilterCriteriaInfo {
  filter: IFilterCriterion
  limit: Int
  page: Int
  sort: ISortCriteria
}

type GenericResult {
  error: String
  success: Boolean!
  successData: String
}

input IFilterCriterion {
  filters: [IFilterCriterion!]
  property: String
  type: String
  typeValue: String
  value: String
}

input ISortCriteria {
  column: String!
  order: String!
}

type Mutation {
  createBrand(brandInputDto: BrandInputDto!): Brand!
  createCategory(categoryInputDto: CategoryInputDto!): Category!
  createProduct(productInputDto: ProductInputDto!): Product!
  createSale(saleInputDto: NewSaleInputDto!): GenericResult!
  createSaleDetail(saleDetailInputDto: SaleDetailInputDto!): SaleDetail!
  createUser(userInputDto: UserInputDto!): User!
  loadProduct: GenericResult!
  removeBrand(id: Int!): Brand!
  removeCategory(id: Int!): Category!
  removeProduct(id: Int!): Product!
  removeSale(id: ID!): Sale!
  removeSaleDetail(id: Int!): SaleDetail!
  removeUser(id: Int!): User!
  updateBrand(brandInputDto: BrandInputDto!, id: Int!): Brand!
  updateCategory(categoryInputDto: CategoryInputDto!, id: Int!): Category!
  updateProduct(id: Int!, productInputDto: ProductInputDto!): Product!
  updateSale(id: ID!, saleInputDto: SaleInputDto!): Sale!
  updateSaleDetail(id: Int!, saleDetailInputDto: SaleDetailInputDto!): SaleDetail!
  updateUser(id: Int!, userInputDto: UserInputDto!): User!
}

input NewSaleInputDto {
  saleDetails: [SaleDetailInputDto!]!
}

type Product {
  brand: Brand
  brandId: String
  code: String
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  enabled: Boolean
  id: ID
  name: String!
  price: Float
  updatedAt: DateTime
}

input ProductInputDto {
  code: String
  name: String
  price: Float
}

type ProductListPageInfoResponse {
  data: [Product!]
  limit: Int
  page: Int
  totalPages: Int
  totalRecords: Int
}

type Query {
  brand(id: Int!): Brand!
  brandFindAll(criteria: FilterCriteriaInfo): [Brand!]!
  brandListPage(brandCriteria: FilterCriteriaInfo): BrandListPageInfoResponse!
  category(id: Int!): Category!
  categoryFindAll(criteria: FilterCriteriaInfo): [Category!]!
  categoryListPage(categoryCriteria: FilterCriteriaInfo!): CategoryListPageInfoResponse!
  product(id: Int!): Product!
  productFindAll(criteria: FilterCriteriaInfo): [Product!]!
  productListPage(productCriteria: FilterCriteriaInfo): ProductListPageInfoResponse!
  sale(id: ID!): Sale!
  saleDetail(id: Int!): SaleDetail!
  saleDetailFindAll(criteria: FilterCriteriaInfo): [SaleDetail!]!
  saleDetailListPage(saleDetailCriteria: FilterCriteriaInfo!): SaleDetailListPageInfoResponse!
  saleFindAll(criteria: FilterCriteriaInfo): [Sale!]!
  saleListPage(saleCriteria: FilterCriteriaInfo!): SaleListPageInfoResponse!
  user(id: Int!): User!
  userFindAll(criteria: FilterCriteriaInfo): [User!]!
  userListPage(userCriteria: FilterCriteriaInfo!): UserListPageInfoResponse!
}

type Role {
  createdAt: DateTime
  deletedAt: DateTime
  id: ID
  name: String!
  updatedAt: DateTime
  users: [User!]!
}

type Sale {
  createdAt: DateTime
  deletedAt: DateTime
  details: [SaleDetail!]!
  id: ID
  name: String
  total: Float!
  updatedAt: DateTime
}

type SaleDetail {
  createdAt: DateTime
  deletedAt: DateTime
  id: ID
  price: Float
  product: Product
  productId: String
  quantity: Int
  sale: Sale
  saleId: String
  total: Float
  updatedAt: DateTime
}

input SaleDetailInputDto {
  price: Float!
  productId: ID!
  quantity: Int!
  saleId: ID
}

type SaleDetailListPageInfoResponse {
  data: [SaleDetail!]
  limit: Int
  page: Int
  totalPages: Int
  totalRecords: Int
}

input SaleInputDto {
  name: String!
}

type SaleListPageInfoResponse {
  data: [Sale!]
  limit: Int
  page: Int
  totalPages: Int
  totalRecords: Int
}

type User {
  active: Boolean
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  enabled: Boolean
  firstName: String
  fullName: String
  id: ID
  lastName: String
  password: String!
  role: Role!
  roleId: String!
  updatedAt: DateTime
}

input UserInputDto {
  active: Boolean
  email: String!
  enabled: Boolean
  firstName: String
  lastName: String
  password: String
  roleId: ID!
}

type UserListPageInfoResponse {
  data: [User!]
  limit: Int
  page: Int
  totalPages: Int
  totalRecords: Int
}